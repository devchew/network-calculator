{"ast":null,"code":"export const convertIpToBin = ip => ip.split('.').map(octet => parseInt(octet, 10).toString(2).padStart(8, '0'));\nexport const convertIpToDec = ip => ip.map(octet => String(parseInt(octet, 2)));\nexport const calculateBroadcast = (ip, mask) => mask.map((mOctet, i) => mOctet.split('').map((bit, j) => bit === '1' ? ip[i][j] : '1').join(''));\nexport const calculateNetworkAddress = (ip, mask) => mask.map((mOctet, i) => mOctet.split('').map((bit, j) => bit === '1' ? ip[i][j] : '0').join(''));\nexport const netmaskShort = netmask => netmask.join('').split('').reduce((sum, bit) => sum + parseInt(bit, 10), 0);\nexport const calculateHostsCount = netmask => Math.pow(2, 32 - netmaskShort(netmask)) - 2;\nexport const addOneBin = octet => {\n  const newOctet = parseInt(octet, 2) + 1;\n  return parseInt(String(newOctet), 10).toString(2).padStart(8, '0');\n};\nexport const removeOneBin = octet => {\n  const newOctet = parseInt(octet, 2) - 1;\n  return parseInt(String(newOctet), 10).toString(2).padStart(8, '0');\n};\nexport const calculateGatewayAddress = broadcast => broadcast.map((octet, octetNo) => octetNo === 3 ? removeOneBin(octet) : octet);\nexport const calculateFirstAddressAddress = network => network.map((octet, octetNo) => octetNo === 3 ? addOneBin(octet) : octet);\nexport const addSpaceAtposition = (address, position) => address.map((octet, octetNo) => octet.split('').map((bit, bitNo) => octetNo * 8 + (bitNo + 1) === position ? `${bit} ` : bit).join(''));\nexport const netmaskLengthToIp = length => convertIpToDec(['', '', '', ''].map((_, octetNo) => new Array(8).fill('0').map((_, bitNo) => octetNo * 8 + (bitNo + 1) > length ? '0' : '1').join('')));","map":{"version":3,"names":["convertIpToBin","ip","split","map","octet","parseInt","toString","padStart","convertIpToDec","String","calculateBroadcast","mask","mOctet","i","bit","j","join","calculateNetworkAddress","netmaskShort","netmask","reduce","sum","calculateHostsCount","Math","pow","addOneBin","newOctet","removeOneBin","calculateGatewayAddress","broadcast","octetNo","calculateFirstAddressAddress","network","addSpaceAtposition","address","position","bitNo","netmaskLengthToIp","length","_","Array","fill"],"sources":["C:/Users/Infin/Documents/git/network-calculator/src/addressCalculations.ts"],"sourcesContent":["export const convertIpToBin = (ip: string) =>\r\n  ip\r\n    .split('.')\r\n    .map((octet) => parseInt(octet, 10).toString(2).padStart(8, '0'));\r\nexport const convertIpToDec = (ip: any[]) =>\r\n  ip.map((octet) => String(parseInt(octet, 2)));\r\nexport const calculateBroadcast = (ip: any[], mask: any[]): string[] =>\r\n  mask.map((mOctet, i) =>\r\n    mOctet\r\n      .split('')\r\n      .map((bit: string, j: string | number) => (bit === '1' ? ip[i][j] : '1'))\r\n      .join('')\r\n  );\r\nexport const calculateNetworkAddress = (ip: any[], mask: any[]): string[] =>\r\n  mask.map((mOctet, i) =>\r\n    mOctet\r\n      .split('')\r\n      .map((bit: string, j: string | number) => (bit === '1' ? ip[i][j] : '0'))\r\n      .join('')\r\n  );\r\n\r\nexport const netmaskShort = (netmask: string[]) =>\r\n  netmask\r\n    .join('')\r\n    .split('')\r\n    .reduce((sum, bit) => sum + parseInt(bit, 10), 0);\r\n\r\nexport const calculateHostsCount = (netmask: string[]) =>\r\n  Math.pow(2, 32 - netmaskShort(netmask)) - 2;\r\n\r\nexport const addOneBin = (octet: string): string => {\r\n  const newOctet = parseInt(octet, 2) + 1;\r\n  return parseInt(String(newOctet), 10).toString(2).padStart(8, '0');\r\n};\r\n\r\nexport const removeOneBin = (octet: string): string => {\r\n  const newOctet = parseInt(octet, 2) - 1;\r\n  return parseInt(String(newOctet), 10).toString(2).padStart(8, '0');\r\n};\r\n\r\nexport const calculateGatewayAddress = (broadcast: string[]) =>\r\n  broadcast.map((octet, octetNo) =>\r\n    octetNo === 3 ? removeOneBin(octet) : octet\r\n  );\r\nexport const calculateFirstAddressAddress = (network: string[]) =>\r\n  network.map((octet, octetNo) => (octetNo === 3 ? addOneBin(octet) : octet));\r\n\r\nexport const addSpaceAtposition = (address: string[], position: number): string[] =>\r\n  address.map((octet, octetNo) =>\r\n    octet\r\n      .split('')\r\n      .map((bit, bitNo) =>\r\n        octetNo * 8 + (bitNo + 1) === position ? `${bit} ` : bit\r\n      )\r\n      .join('')\r\n  );\r\n\r\nexport const netmaskLengthToIp = (length: number): string[] =>\r\n  convertIpToDec(\r\n    ['', '', '', ''].map((_, octetNo) =>\r\n      new Array(8)\r\n        .fill('0')\r\n        .map((_, bitNo) => (octetNo * 8 + (bitNo + 1) > length ? '0' : '1'))\r\n        .join('')\r\n    )\r\n  );\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}