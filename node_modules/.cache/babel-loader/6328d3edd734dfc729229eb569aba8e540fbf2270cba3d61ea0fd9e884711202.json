{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Infin\\\\Documents\\\\git\\\\network-calculator\\\\src\\\\IpCalculator.tsx\";\nimport React from 'react';\nimport { addSpaceAtposition, calculateBroadcast, calculateFirstAddressAddress, calculateGatewayAddress, calculateHostsCount, calculateNetworkAddress, convertIpToBin, convertIpToDec, netmaskShort } from './addressCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IpCalculatorRow = ({\n  name,\n  ip,\n  position\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: (position ? addSpaceAtposition(ip, position) : ip).join('.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: convertIpToDec(ip).map(octet => String(octet).padStart(3, '_')).join('.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = IpCalculatorRow;\nconst IpCalculator = ({\n  ip,\n  netmask\n}) => {\n  const ipBin = convertIpToBin(ip);\n  const netmaskBin = convertIpToBin(netmask);\n  const netmaskLength = netmaskShort(netmaskBin);\n  const netAddressBin = calculateNetworkAddress(ipBin, netmaskBin);\n  const broadcastAddress = calculateBroadcast(ipBin, netmaskBin);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        position: netmaskLength,\n        ip: ipBin,\n        name: \"ip address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        position: netmaskLength,\n        ip: netmaskBin,\n        name: \"mask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        position: netmaskLength,\n        ip: netAddressBin,\n        name: \"network address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        position: netmaskLength,\n        ip: broadcastAddress,\n        name: \"broadcast address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"hosts count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateHostsCount(netmaskBin)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        ip: calculateFirstAddressAddress(netAddressBin),\n        name: \"first address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IpCalculatorRow, {\n        ip: calculateGatewayAddress(broadcastAddress),\n        name: \"gateway address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c2 = IpCalculator;\nexport default IpCalculator;\nvar _c, _c2;\n$RefreshReg$(_c, \"IpCalculatorRow\");\n$RefreshReg$(_c2, \"IpCalculator\");","map":{"version":3,"names":["React","addSpaceAtposition","calculateBroadcast","calculateFirstAddressAddress","calculateGatewayAddress","calculateHostsCount","calculateNetworkAddress","convertIpToBin","convertIpToDec","netmaskShort","jsxDEV","_jsxDEV","IpCalculatorRow","name","ip","position","children","fileName","_jsxFileName","lineNumber","columnNumber","join","map","octet","String","padStart","_c","IpCalculator","netmask","ipBin","netmaskBin","netmaskLength","netAddressBin","broadcastAddress","_c2","$RefreshReg$"],"sources":["C:/Users/Infin/Documents/git/network-calculator/src/IpCalculator.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport {\r\n  addSpaceAtposition,\r\n  calculateBroadcast,\r\n  calculateFirstAddressAddress,\r\n  calculateGatewayAddress,\r\n  calculateHostsCount,\r\n  calculateNetworkAddress,\r\n  convertIpToBin,\r\n  convertIpToDec,\r\n  netmaskShort,\r\n} from './addressCalculations';\r\n\r\ninterface Props {\r\n  ip: string;\r\n  netmask: string;\r\n}\r\n\r\nconst IpCalculatorRow: FunctionComponent<{\r\n  ip: string[];\r\n  name: string;\r\n  position?: number;\r\n}> = ({ name, ip, position }) => {\r\n  return (\r\n    <tr>\r\n      <td>{name}</td>\r\n      <td>{(position ? addSpaceAtposition(ip, position) : ip).join('.')}</td>\r\n      <td>\r\n        {convertIpToDec(ip)\r\n          .map((octet) => String(octet).padStart(3, '_'))\r\n          .join('.')}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst IpCalculator: FunctionComponent<Props> = ({ ip, netmask }) => {\r\n  const ipBin = convertIpToBin(ip);\r\n  const netmaskBin = convertIpToBin(netmask);\r\n  const netmaskLength = netmaskShort(netmaskBin);\r\n  const netAddressBin = calculateNetworkAddress(ipBin, netmaskBin);\r\n  const broadcastAddress = calculateBroadcast(ipBin, netmaskBin);\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <IpCalculatorRow\r\n          position={netmaskLength}\r\n          ip={ipBin}\r\n          name=\"ip address\"\r\n        />\r\n        <IpCalculatorRow position={netmaskLength} ip={netmaskBin} name=\"mask\" />\r\n        <IpCalculatorRow\r\n          position={netmaskLength}\r\n          ip={netAddressBin}\r\n          name=\"network address\"\r\n        />\r\n        <IpCalculatorRow\r\n          position={netmaskLength}\r\n          ip={broadcastAddress}\r\n          name=\"broadcast address\"\r\n        />\r\n        <tr>\r\n          <td>hosts count</td>\r\n          <td>{calculateHostsCount(netmaskBin)}</td>\r\n          <td />\r\n        </tr>\r\n        <IpCalculatorRow\r\n          ip={calculateFirstAddressAddress(netAddressBin)}\r\n          name=\"first address\"\r\n        />\r\n        <IpCalculatorRow\r\n          ip={calculateGatewayAddress(broadcastAddress)}\r\n          name=\"gateway address\"\r\n        />\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default IpCalculator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}